@page "/sources"
@using WeatherCollector.Interfaces.Repositories;
@using WeatherCollector.Domain;
@inject IRepository<Source> _repository;

<div class="head-container">
    <div class="search-bar">
        <i class="bx bx-search"></i>
        <input type="text" @bind="_filter" @bind:event="oninput" placeholder="Search..." />
    </div>

    <button class="add-btn">
        Add a new source
    </button>
</div>

<div class="container centered">
    @if (SortedSources is { } sources)
    {
        <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Details</th>
                    <th class="actions">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var source in sources)
                {
                    <tr>
                        <td>@source.Id</td>
                        <td>@source.Name</td>
                        <td>@source.Details</td>
                        <td class="actions">
                            <button class="edit-btn">
                                <i class='bx bx-edit'></i>
                            </button>
                            <button class="remove-btn">
                                <i class='bx bx-trash-alt'></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private IEnumerable<Source>? _sources;

    private string? _filter;

    private IEnumerable<Source>? SortedSources =>
        string.IsNullOrWhiteSpace(_filter) ? _sources 
        : _sources?.Where(s => s.Id.ToString() == _filter 
            || (s.Name?.Contains(_filter) ?? false) 
            || (s.Details?.Contains(_filter) ?? false));

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load() => _sources = await _repository.GetAll();

}
