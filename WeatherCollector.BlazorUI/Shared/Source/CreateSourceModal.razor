@using WeatherCollector.BlazorUI.Models.Source;
@using WeatherCollector.BlazorUI.Services.Interfaces;
@using WeatherCollector.Interfaces.Repositories;
@using WeatherCollector.Domain;
@inject ISourcesService _sourcesService;

@if (_isOpened)
{
    <div class="modal-container">
        <div class="modal">
            <div class="content">
                <header>
                    <h2>Create a new source</h2>
                    <i class='bx bx-x' @onclick="Close"></i>
                </header>
                <EditForm Model="_newSourceModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator/>
                    <div class="field">
                        <label>Name</label>
                        <InputText @bind-Value="_newSourceModel.Name" />
                        <ValidationMessage For="() => _newSourceModel.Name" />
                    </div>
                    <div class="field">
                        <label>Details</label>
                        <InputTextArea @bind-Value="_newSourceModel.Details" />
                    </div>
                    @if (_faultMessage != null)
                    {
                        <p class="validation-message">@_faultMessage</p>
                    }
                    <button type="submit">Create</button>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    private SourceCreateDTO _newSourceModel = new();

    [Parameter]
    public EventCallback<Source> SourceCreated { get; set; }

    private bool _isOpened;

    private string? _faultMessage;

    public void Open() => _isOpened = true;

    public void Close()
    {
        _isOpened = false;
        _newSourceModel = new();
    }

    private async Task HandleSubmit()
    {
        var response = await _sourcesService.Create(_newSourceModel);
        if (!response.Success)
        {
            _faultMessage = response.FaultMessage;
            return;
        }

        await OnSourceCreated(response.Data);
        Close();
    }

    private Task OnSourceCreated(Source source) => SourceCreated.InvokeAsync(source);
}